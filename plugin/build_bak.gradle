apply plugin: 'java-library'
// 1:引入groovy插件支持
apply plugin: 'groovy'
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //2:引入gradle api 支持
    compile gradleApi()
    compile localGroovy()
    compile 'com.android.tools.build:gradle:3.0.1'

    //3 引入第三方 库
//    compile 'org.javassist:javassist:3.22.0-GA'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

//---------------------------以下是上传到jcenter时需要生成的文件。----------------------------------

// classpath :groupid :artifactId :version
group 'com.nzh.plugin'
version '1.0'

apply plugin: 'maven-publish'
// 源代码打包任务：继承于Jar任务 ，打出jar包
task my_sourcejar(type: Jar) {

    baseName 'test'
    classifier 'source'  // 分类器，用来区分其他jar包
    from sourceSets.main.allSource
}
// 文档打包任务：需要依赖其他任务 javadoc , groovydoc
task my_docjar(type: Jar, dependsOn: [javadoc, groovydoc]) {

    baseName 'test'
    classifier 'doc'  // 分类器，用来区分其他jar包
    // javadoc 任务来自于java-library 插件
    // groovydoc 任务来自于groovy插件
    from javadoc.destinationDir, groovydoc.destinationDir
}

// 配置my_sourcejar,my_docjar者两个任务
/*artifacts {
    archives my_sourcejar
    archives my_docjar
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = "UTF-8"
}
//编译JAVA文件时采用UTF-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}*/
tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}

publishing {
    publications {
        nzhplugin(MavenPublication) {
            from components.java
            artifactId 'inject'
            artifact my_sourcejar   // 添加上传的文件（my_sourcejar任务的执行结果）
            artifact my_docjar
            // 配置pox.xml 文件
            pom.withXml {
                def root = asNode()
                def licencesNode = root.appendNode('licenses').appendNode('license')
                licencesNode.appendNode('name', 'Apache License, Version 2.0')
                licencesNode.appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.txt')
                licencesNode.appendNode('distribution', 'repo')
                licencesNode.appendNode('comments', 'A business-friendly OSS license')
            }
        }
    }
}
//--------------------------------------以下是上传配置---------------------------------------------
// 使用bintray 官方提供的 插件来上传代码
// 根据gradle 版本不同 使用不同的配置。
// 参见；https://github.com/bintray/gradle-bintray-plugin

// 0：获取api_key 和 创建仓库
// 1
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}
apply plugin: 'com.jfrog.bintray'
// 2
bintray {
    user = 'nzh2018'   // bintray网站的用户名
    key = '357e94f2332293ce63f189c7a7e09fcb03d9eb93' // api_key
    //5
    publications = ['nzhplugin']
    override = true
    //3
    pkg {
        repo = 'my_plugin_repo'    // 上传至仓库的名称
        name = 'inject' // 上传的项目名称
        userOrg = 'nzh2018' // 个人账号如果不配置就是 user的配置，也就是nzh2018。
        publish = true

        licenses = ['Apache-2.0']   // 和 bintray 网站上创建仓库时指定的开源协议一致。
        // vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git' // 不配置也可以
        // 4
        version {
            name = '1.0'  // 不配置就是使用上面的version 配置。这里配置以下。
            desc = '这是一个初始化view的gradle 插件'  // 描述
            released = new Date()   //发布日期
            vcsTag = '1.0'        //  版本控制里面的版本。无所谓。
            // 随便配置，不写也可以
            attributes = ['gradle-plugin': 'com.nzh.gradle:view-init-plugin']
        }
    }
}

//----------------------------------以下是上传操作-------------------------------------------

// 1： 打开 gradle 视图， 找到 :plugin2view /Tasks/ publishing/ bintrayUpload 任务。
//       执行这个任务即可。


